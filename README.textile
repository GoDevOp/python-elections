<pre><code>              
                         _
                        (_)
                       <___>
                        | |______
          _             | |* * * )
        ,' '.           | | * * (_________
       /     \          | |* * * |* *|####)
     ^ |  _  | ^        | | * * *| * |   (________________            
    | || / \ || |       | |* * * |* *|####|##############|
    | |||.-.||| |       | | * * *| * |    |              |
    | |||   ||| |       | |* * * |* *|####|##############|
    | |||   ||| |       | |~~~~~~| * |    |              |
    | |||   ||| |       | |######|* *|####|##############|
    | |||   ||| |       | |      |~~~'    |              |
    | ,'     '. |       | |######|########|##############|
    ,'__     __`.       | |      |        |              |
   /____  |  ____\      | |######|########|##############|
    /_\ |_|_| /_\       | |~~~~~~|        |              |
    .:   : :   :.       | |      |########|##############|
    : .  : .  : :       | |      '~~~~~~~~|              |
     ::   ::   ::       | |               |##############|
                        | |               '~~~~~~~~~~~~~~~
                        | |
                        | |
                        | |</code></pre>


Feel free to screw with, destroy, rebuild, rename whatever I've got right now. Just getting something down on paper, so to speak.

Current API:
<pre><code>>>> from elections import AP
>>> client = AP(uname, pwd)
>>> ia = client.get_state('IA')
>>> ia.races[0]
<Race: President>
>>> ia.races[0].candidates[4]
<Candidate: Rick Santorum>
>>> ia.races[0].candidates[4].vote_total
0
>>> ia.races[0].candidates[4].is_winner
False
>>> ia.races[0].state_results[:3]
[<Result: Other, Iowa (state), 0>, <Result: Jon Huntsman, Iowa (state), 0>, <Result: Newt Gingrich, Iowa (state), 0>]
>>> ia.races[0].counties[10].results[:3]
[<Result: Other, Wright, 0>, <Result: Jon Huntsman, Wright, 0>, <Result: Newt Gingrich, Wright, 0>]
>>> ia.fetch_delegates() # Gets delegate totals for all candidates in a primary race
>>> ia.races[0].candidates[4].delegates
0
</code></pre>

Pull Iowa GOP results

<pre><code>import calculate
from elections import AP
from operator import itemgetter
from private_settings import *

# Log into AP
client = AP(AP_USERNAME, AP_PASSWORD)

# Pull the data on the Iowa GOP caucus
iowa = client.get_state("IA")
gop_caucus = iowa.races[0]

print gop_caucus.office_name
print "%s/%s (%s percent)" % (
    gop_caucus.precincts_reporting,
    gop_caucus.precincts_total,
    gop_caucus.precincts_reporting_percent,
)
print "%s votes cast" % gop_caucus.votes_cast

state_results = [(
    i.vote_total,
    i.vote_total_percent,
    i.candidate.__unicode__(),
    i.candidate.is_winner,
    ) for i in gop_caucus.state_results]

state_results.sort(key=itemgetter(0,2))

vote_totals = [i[0] for i in state_results]
margin_of_victory = calculate.margin_of_victory(vote_totals)
if margin_of_victory:
    print "%s leads by %s votes" % (state_results[0][2], margin_of_victory)
else:
    print "It's a tie."

for cand in state_results:
    print cand[2], cand[1], cand[0], cand[3]</code></pre>
